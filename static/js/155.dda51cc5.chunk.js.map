{"version":3,"file":"static/js/155.dda51cc5.chunk.js","mappings":"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","sources":["Components/TaskItem.tsx","Components/TaskList.tsx","types.tsx","Components/AddTaskForm.tsx","Components/TaskFilter.tsx","pages/main.tsx"],"sourcesContent":["import React from 'react';\r\nimport { Task } from '../types';\r\n\r\nimport '../styles/taskItem.css'\r\n\r\ninterface TaskItemProps {\r\n  task: Task;\r\n  toggleTaskCompletion: (taskId: number) => void;\r\n  deleteTask: (taskId: number) => void;\r\n}\r\n\r\nexport const TaskItem: React.FC<TaskItemProps> = ({ task, toggleTaskCompletion, deleteTask }) => {\r\n  return (\r\n    <li className={`task-item ${task.completed ? 'completed' : ''}`}>\r\n      <span \r\n        className=\"task-title\" \r\n        onClick={() => toggleTaskCompletion(task.id)}\r\n      >\r\n        {task.title}\r\n      </span>\r\n      <button className=\"delete-button\" onClick={() => deleteTask(task.id)}>Delete</button>\r\n    </li>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Task } from '../types';\r\nimport { TaskItem } from './TaskItem';\r\n\r\nimport '../styles/taskList.css'\r\n\r\ninterface TaskListProps {\r\n  tasks: Task[];\r\n  toggleTaskCompletion: (taskId: number) => void;\r\n  deleteTask: (taskId: number) => void;\r\n}\r\n\r\nexport const TaskList: React.FC<TaskListProps> = ({ tasks, toggleTaskCompletion, deleteTask }) => {\r\n  return (\r\n    <ul className=\"task-list\">\r\n      {tasks.map(task => (\r\n        <TaskItem \r\n          key={task.id} \r\n          task={task} \r\n          toggleTaskCompletion={toggleTaskCompletion} \r\n          deleteTask={deleteTask} \r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n","export interface Task {\r\n    id: number;\r\n    title: string;\r\n    category: TaskCategory;\r\n    priority: TaskPriority;\r\n    deadline: Date;\r\n    completed: boolean;\r\n  }\r\n  \r\n  export enum TaskCategory {\r\n    WORK = 'Work',\r\n    PERSONAL = 'Personal',\r\n    HOBBY = 'Hobby'\r\n  }\r\n  \r\n  export enum TaskPriority {\r\n    HIGH = 'High',\r\n    MEDIUM = 'Medium',\r\n    LOW = 'Low'\r\n  }\r\n  ","import React, { useState, FormEvent } from 'react';\r\nimport { Task, TaskCategory, TaskPriority } from '../types';\r\n\r\nimport '../styles/addTaskForm.css'\r\n\r\ninterface AddTaskFormProps {\r\n  addTask: (task: Task) => void;\r\n}\r\n\r\nexport const AddTaskForm: React.FC<AddTaskFormProps> = ({ addTask }) => {\r\n  const [title, setTitle] = useState('');\r\n  const [category, setCategory] = useState<TaskCategory>(TaskCategory.WORK);\r\n  const [priority, setPriority] = useState<TaskPriority>(TaskPriority.MEDIUM);\r\n  const [deadline, setDeadline] = useState<string>('');\r\n\r\n  const handleSubmit = (e: FormEvent) => {\r\n    e.preventDefault();\r\n    if (!title || !deadline) return;\r\n    const newTask: Task = {\r\n      id: Date.now(),\r\n      title,\r\n      category,\r\n      priority,\r\n      deadline: new Date(deadline),\r\n      completed: false\r\n    };\r\n    addTask(newTask);\r\n    setTitle('');\r\n    setCategory(TaskCategory.WORK);\r\n    setPriority(TaskPriority.MEDIUM);\r\n    setDeadline('');\r\n  };\r\n\r\n  return (\r\n    <form className=\"add-task-form\" onSubmit={handleSubmit}>\r\n      <input \r\n        type=\"text\" \r\n        placeholder=\"Add a new task...\" \r\n        value={title} \r\n        onChange={(e) => setTitle(e.target.value)} \r\n      />\r\n      <select value={category} onChange={(e) => setCategory(e.target.value as TaskCategory)}>\r\n        {Object.values(TaskCategory).map(cat => (\r\n          <option key={cat} value={cat}>{cat}</option>\r\n        ))}\r\n      </select>\r\n      <select value={priority} onChange={(e) => setPriority(e.target.value as TaskPriority)}>\r\n        {Object.values(TaskPriority).map(pri => (\r\n          <option key={pri} value={pri}>{pri}</option>\r\n        ))}\r\n      </select>\r\n      <input \r\n        type=\"date\" \r\n        value={deadline} \r\n        onChange={(e) => setDeadline(e.target.value)} \r\n      />\r\n      <button type=\"submit\">Add Task</button>\r\n    </form>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { TaskCategory, TaskPriority } from '../types';\r\n\r\nimport '../styles/taskFilter.css'\r\n\r\ninterface TaskFiltersProps {\r\n  filters: { category: TaskCategory | null; priority: TaskPriority | null };\r\n  setFilters: (filters: { category: TaskCategory | null; priority: TaskPriority | null }) => void;\r\n}\r\n\r\nexport const TaskFilters: React.FC<TaskFiltersProps> = ({ filters, setFilters }) => {\r\n  return (\r\n    <div className=\"task-filters\">\r\n      <select \r\n        value={filters.category || ''} \r\n        onChange={(e) => setFilters({ ...filters, category: e.target.value as TaskCategory })}\r\n      >\r\n        <option value=\"\">All Categories</option>\r\n        {Object.values(TaskCategory).map(cat => (\r\n          <option key={cat} value={cat}>{cat}</option>\r\n        ))}\r\n      </select>\r\n      <select\r\n        value={filters.priority || ''} \r\n        onChange={(e) => setFilters({ ...filters, priority: e.target.value as TaskPriority })}\r\n      >\r\n        <option value=\"\">All Priorities</option>\r\n        {Object.values(TaskPriority).map(pri => (\r\n          <option key={pri} value={pri}>{pri}</option>\r\n        ))}\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nimport { TaskList } from '../Components/TaskList';\r\nimport { AddTaskForm } from '../Components/AddTaskForm';\r\nimport { Task, TaskCategory, TaskPriority } from '../types';\r\nimport { TaskFilters } from '../Components/TaskFilter';\r\n\r\n\r\nconst Main = () => {\r\n\r\n    const [tasks, setTasks] = useState<Task[]>([]);\r\n    const [filters, setFilters] = useState<{ category: TaskCategory | null; priority: TaskPriority | null }>({ category: null, priority: null })\r\n    const addTask = (task: Task) => {\r\n        setTasks([...tasks, task]);\r\n    }\r\n    const toggleTaskCompletion = (taskId: number) => {\r\n        setTasks(tasks.map(task =>\r\n            task.id === taskId ? { ...task, completed: !task.completed } : task\r\n        ));\r\n    }\r\n    const deleteTask = (taskId: number) => {\r\n        setTasks(tasks.filter(task => task.id !== taskId));\r\n    }\r\n    const filteredTasks = tasks.filter(task => {\r\n        return (!filters.category || task.category === filters.category) &&\r\n            (!filters.priority || task.priority === filters.priority);\r\n    });\r\n\r\n\r\n    return (\r\n        <div className='app'>\r\n            <h1>To-Do Task Manager</h1>\r\n            <AddTaskForm addTask={addTask} />\r\n            <TaskFilters filters={filters} setFilters={setFilters} />\r\n            <TaskList tasks={filteredTasks} toggleTaskCompletion={toggleTaskCompletion} deleteTask={deleteTask} />\r\n        </div>\r\n    )\r\n}\r\nexport default Main;"],"names":["TaskItem","_ref","task","toggleTaskCompletion","deleteTask","_jsxs","className","concat","completed","children","_jsx","onClick","id","title","TaskList","tasks","map","TaskCategory","TaskPriority","AddTaskForm","addTask","setTitle","useState","category","setCategory","WORK","priority","setPriority","MEDIUM","deadline","setDeadline","onSubmit","e","preventDefault","newTask","Date","now","type","placeholder","value","onChange","target","Object","values","cat","pri","TaskFilters","filters","setFilters","Main","setTasks","filteredTasks","filter","taskId"],"sourceRoot":""}